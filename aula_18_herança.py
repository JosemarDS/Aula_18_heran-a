# -*- coding: utf-8 -*-
"""Aula_18_herança

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/129K8h2vsqISsOia19d3ByXQaxjI_am1T

# HERANÇA

A herança é um conceito fundamental na programação orientada a objetos (POO) e desempenha um papel importante em Python, assim como em muitas outras linguagens de programação. A herança permite que você crie uma nova classe com base em uma classe existente, aproveitando seus atributos e métodos. Em Python, a herança é implementada de forma simples e poderosa. Vamos explorar os conceitos básicos de herança em Python:

OU SEJA A CLASSE HERDA PROPRIEDADES E MÉTODOS DE OUTRA CLASSE.

### **Sintaxe Básica**

Para criar uma classe derivada em Python, você define a classe base entre parênteses ao definir a classe derivada. Aqui está a sintaxe básica:
"""

class ClasseBase:
    # Atributos e métodos da classe base

class ClasseDerivada(ClasseBase):
    # Atributos e métodos adicionais da classe derivada

"""### **Exemplo de Herança em Python**

Vamos criar um exemplo simples de herança em Python para ilustrar esses conceitos:

Neste exemplo, **`Animal`** é a classe base, e **`Cachorro`** e **`Gato`** são classes derivadas que herdam de **`Animal`**. Cada classe derivada sobrescreve o método **`fazer_som`** da classe base para fornecer uma implementação específica.
"""

class Animal:
    def __init__(self, nome):
        self.nome = nome

    def fazer_som(self):
        pass  # Método a ser implementado nas subclasses


class Cachorro(Animal):
    def fazer_som(self):
        return f"{self.nome} faz 'Au Au!'"


class Gato(Animal):
    def fazer_som(self):
        return f"{self.nome} faz 'Miau!'"


# Uso das classes
rex = Cachorro("Rex")
whiskers = Gato("Whiskers")

print(rex.fazer_som())      # Saída: "Rex faz 'Au Au!'"
print(whiskers.fazer_som()) # Saída: "Whiskers faz 'Miau!'"

"""### **A Função `super()`**

A função **`super()`** é usada para chamar um método da classe base a partir da classe derivada. Isso é útil quando você deseja estender a funcionalidade da classe base na classe derivada, mas ainda deseja executar o código da classe base. Por exemplo:

ABSTRAÇÃO:

Imagine que você está construindo um carro de brinquedo. Esse carro tem rodas e faz barulho quando você o empurra. Agora, você quer fazer um carro de bombeiros especial que também tem rodas, mas faz um som de sirene quando é empurrado.

- A classe base seria como o carro de brinquedo comum. Ele tem rodas e faz um barulho genérico quando você o empurra.
- A classe derivada, ou seja, o carro de bombeiros especial, é como o carro de brinquedo comum, mas com um toque especial. Ele ainda tem as rodas e faz o barulho genérico, mas também faz um som de sirene.

Agora, imagine que você está construindo o carro de bombeiros. Você quer que ele faça o barulho genérico das rodas, como o carro de brinquedo comum. Então, você usa um pedaço de papel que representa o carro de brinquedo comum (a classe base) e coloca-o embaixo do carro de bombeiros especial (a classe derivada).

Quando alguém empurra o carro de bombeiros, ele olha embaixo e vê o pedaço de papel (a classe base) e diz: "Ei, carro de brinquedo comum, faça o seu barulho de rodas!"

O pedaço de papel (a classe base) faz o barulho das rodas, e o carro de bombeiros especial também faz o som da sirene. Dessa forma, o carro de bombeiros especial pode ter as características especiais que você deseja, mas também aproveita algumas coisas do carro de brinquedo comum.

Em Python, a função **`super()`** é como o pedaço de papel. Ela permite que a classe derivada (o carro de bombeiros especial) chame os métodos da classe base (o carro de brinquedo comum) quando necessário, para que você possa estender a funcionalidade sem perder o que já estava lá. É como pedir a ajuda do carro de brinquedo comum para fazer parte do trabalho!
"""

class Pessoa:
    def __init__(self, nome, idade, matricula):
        self.nome = nome
        self.idade = idade
        self.matricula = matricula

    def apresentar(self):
        return f"Olá, meu nome é {self.nome} e tenho {self.idade} anos."


class Estudante(Pessoa):
      def apresentar(self):
        return f"Olá, eu sou o estudante {self.nome}, tenho {self.idade} anos e minha matrícula é {self.matricula}."


estudante = Estudante("João", "20", "12345")
print(estudante.apresentar())




class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def apresentar(self):
        return f"Olá, meu nome é {self.nome} e tenho {self.idade} anos."


class Estudante(Pessoa):
    def __init__(self,  matricula, nome, idade):
        super().__init__(nome, idade)
        self.matricula = matricula

    def apresentar(self):
        return f"Olá, eu sou o estudante {self.nome}, tenho {self.idade} anos e minha matrícula é {self.matricula}."


estudante = Estudante("João", 20, "12345")
print(estudante.apresentar())













#Classe

# def new_func():
#     class Menino:
#           def __init__(self, nome, idade, endereco):
#                 self.nome = nome
#                 self.idade = idade
#                 self.endereco = endereco

#           def falar(self):
#                 print(f"Olá meu nome é, {self.nome}" )

#           def andar(self, km = 20 ):
#                     print(f"andei {km} km's")



#     menino = Menino("Carlos", 18, "Rua 30")
#     menino.falar()
#     menino.andar()

# new_func()

"""Exercício 1:
Crie uma classe chamada Animal com um método falar()
que exibe "Som de animal desconhecido". Em seguida, crie uma classe
Cachorro que herda de Animal e substitui o método falar() para exibir
"Latindo". Crie uma instância de cachorro e chame o método falar().
"""



"""Exercício 2:
Crie uma classe chamada Veiculo com um atributo velocidade
inicializado com 0. Em seguida, crie uma classe Carro que herda de
 Veiculo e possui um método acelerar() que aumenta a velocidade em
10 unidades. Crie uma instância de Carro, chame acelerar() três vezes
e exiba a velocidade final.
"""

class Veiculo:
    def __init__(self):
        self.velocidade = 0

class Carro(Veiculo):
    def acelerar(self):
        self.velocidade += 10

# Criando uma instância de Carro
meu_carro = Carro()
# Acelerando o carro três vezes
for _ in range(3):
    meu_carro.acelerar()
# Exibindo a velocidade final
print(f"Velocidade final do carro: {meu_carro.velocidade} km/h")

"""Exercício 3:
Crie uma classe Pessoa com atributos nome e idade.
Em seguida, crie uma classe Estudante que herda de Pessoa
e adiciona um atributo matricula. Crie uma instância de Estudante
e exiba o nome, idade e matrícula.
"""

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

class Estudante(Pessoa):
    def __init__(self, nome, idade, matricula):
        super().__init__(nome, idade)
        self.matricula = matricula

# Criando uma instância de Estudante
estudante1 = Estudante("João", 20, "2021001")
# Exibindo o nome, idade e matrícula do estudante
print(f"Nome: {estudante1.nome}")
print(f"Idade: {estudante1.idade} anos")
print(f"Matrícula: {estudante1.matricula}")